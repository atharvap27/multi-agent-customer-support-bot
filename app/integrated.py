from salesforce import *
from all_agents import *
from qdrant import *
from rag import *

all_case_data = get_all_cases()
# print(all_case_data)
unique_parent_ids = get_unique_parent_ids(all_case_data)
# print(unique_parent_ids, type(unique_parent_ids))
for parent_id in unique_parent_ids:
    records_by_id = get_records_by_parent_id(all_case_data,parent_id)
    print(records_by_id[-1])
    subject_record = records_by_id[-1]['Subject']
    description_record = records_by_id[-1]['Description']

# case_data_by_id = transform_case_data(all_case_data)
# # print("CASE DATA BY ID: ", case_data_by_id[-2:])
    email_classifier_task = Task(
        name="Process Determiner",
        output_type=OutputType.TEXT,
        input_type=InputType.TEXT,
        model=open_ai_model,
        agent=email_summary_writer_agent,
        instructions="""
        You are a person who goes through an email and determines if the email is written by CUSTOMER SUPPORT EXECUTIVE or the CLIENT.
        JUST REPLY AS EITHER CUSTOMER SUPPORT EXECUTIVE or CLIENT as your output.
        """,
        enhance_prompt=True,
        default_input=subject_record+description_record
    ).execute()
    if "CLIENT" in email_classifier_task:
        print('hi')

#     research_task = Task(
#         name="Summary writer",
#         output_type=OutputType.TEXT,
#         input_type=InputType.TEXT,
#         model=open_ai_model,
#         agent=email_summary_writer_agent,
#         instructions="""
#         You are a PROFESSIONAL SUMMARY WRITER. 
#         Your task is to CONSTRUCT A DETAILED SUMMARY from a LIST OF EMAIL CONVERSATIONS, each having a SUBJECT and BODY (DESCRIPTION). 
#         This summary should be DETAILED, COVERING ALL NECESSARY DETAILS, and should be in a PARAGRAPH FORMAT as it will be used by another system to GENERATE QUESTIONS to help us REPLY TO THE LATEST EMAIL.
#         ALWAYS INCLUDE EVERY DETAIL from the LAST 4 EMAILS as they are the MOST RECENT and CRITICALLY IMPORTANT for drafting the NEXT EMAIL RESPONSE. Explain the summary as if you are addressing it to a TECHNICAL SUPPORT SPECIALIST, ensuring all RELEVANT DETAILS and CONTEXT are CLEAR and PRECISE.
#         Make sure the summary is COMPREHENSIVE and COVERS ALL ASPECTS discussed in the emails, especially FOCUSING ON THE KEY POINTS and ISSUES RAISED in the LATEST COMMUNICATIONS.
#         """,
#         enhance_prompt=False,
#         default_input=records_by_id
#     ).execute()

#     print("RESEARCH: ", research_task)

#     question_framer_task = Task(
#         name="Questionnaire Designer",
#         output_type=OutputType.TEXT,
#         input_type=InputType.TEXT,
#         model=open_ai_model,
#         agent=question_framer_agent,
#         instructions="""
#         You are a customer support TROUBLESHOOTING EXPERT who works in the customer support team.
#         Your task is to UNDERSTAND the email conversation and it's summary in detail. 
#         After getting a deep understanding of the conversation, issues faced by customer, solutions suggested by the customer support agent and then solutions tried by the customer, give the NEXT STEPS that the CUSTOMER needs to try.
#         Also, if you have any TECHNICAL QUESTIONS whose answer is needed to be searched from the COMPANY INTERNAL TECHNICAL DOCUMENTS using RETRIEVAL AUGMENTED GENERATION system, mention them as well.
#         If you have any QUESTIONS that you want to ask to the CLIENT for BETTER CLARITY, mention that as well.
#         - Give output ONLY in following format:
#           Next Steps for customer: 

#           Technical Questions:

#           Questions for Client: 

#         - ONLY GIVE THE OUTPUT IN ABOVE FORMAT AND DONT GIVE ANY OTHER TEXT.
#         """,
#         enhance_prompt=False,
#         default_input=[records_by_id, research_task]
#     ).execute()
#     print(question_framer_task)

#     question_for_rag = extract_questions_for_rag(question_framer_task)
#     que_ans = {}
#     for question in question_for_rag:
#         answer = get_answer(question)
#         que_ans[question] = answer
    
#     print("QUE_ANS: ", que_ans)

#     email_writer_task = Task(
#         name="Email writer",
#         output_type=OutputType.TEXT,
#         input_type=InputType.TEXT,
#         model=open_ai_model,
#         agent=email_creator_agent,
#         instructions="""
#         You are a PROFESSIONAL CUSTOMER SUPPORT EXECUTIVE WHO EXCELS IN EMAIL WRITING. 
#         Your task is to CREATE A PROFESSIONAL EMAIL given summary of previous emails, the last email to which you are writing the reply, and the content that email should have.
#         You will receive PAIRS of QUESTIONS and ANSWERS GENERATED by ANOTHER SYSTEM designed to formulate questions that require SEARCHING through ORGANISATION INTERNAL DOCUMENTS for their ANSWERS. Use them to formulate the email as well. 
#         REMEMBER these PAIRS of QUESTIONS and ANSWERS are NOT given by CUSTOMER BUT by ANOTHER SYSTEM like YOU. So just CHECK if these question answer pairs can help YOU better GUIDE the CUSTOMER for TROUBLESHOOTING and DONT write anything like "based on the technical questions provided". 
#         - MAKE SURE that this email looks like it is written by a professional technical support person and not by AI. Make the email humble, polite and interactive.
#         - MENTION THE NAME OF THE CUSTOMER IF YOU GET IT FROM THE INPUT.
#         - KEEP THE EMAIL IN FOLLOWING FORMAT:
#           SUBJECT:

#           BODY:

#         - NO TEXT EXCEPT THE EMAIL
#         - JUST MENTION WARM REGARDS WITHOUT ANY NAME OR CONTACT AT THE END.
#         """,
#         enhance_prompt=False,
#         default_input=[research_task, records_by_id[-1],question_framer_task, que_ans]
#     ).execute()
#     print(email_writer_task)

# subject, body = split_email_content(email_writer_task)



